From e91b5d39ff11ae5baf7f43a7f4b9b7015807e5f6 Mon Sep 17 00:00:00 2001
From: Koro <koro@kzxiv.net>
Date: Sun, 9 Aug 2020 05:08:53 -0400
Subject: [PATCH] Add constructors and conversion code.

Signed-off-by: Bernd Kuhls <bernd.kuhls@t-online.de>
---
 xbmc/pictures/PictureInfoTag.cpp | 93 ++++++++++++++++++++++++++++++++
 xbmc/pictures/PictureInfoTag.h   | 75 ++++++++++++++++----------
 2 files changed, 140 insertions(+), 28 deletions(-)

diff --git a/xbmc/pictures/PictureInfoTag.cpp b/xbmc/pictures/PictureInfoTag.cpp
index 517a4a036b..73c7c5678d 100644
--- a/xbmc/pictures/PictureInfoTag.cpp
+++ b/xbmc/pictures/PictureInfoTag.cpp
@@ -16,6 +16,99 @@
 #include <algorithm>
 #include <vector>
 
+CPictureInfoTag::ExifInfo::ExifInfo(const ExifInfo_t& other)
+  : CameraMake(other.CameraMake)
+  , CameraModel(other.CameraModel)
+  , DateTime(other.DateTime)
+  , Height(other.Height)
+  , Width(other.Width)
+  , Orientation(other.Orientation)
+  , IsColor(other.IsColor)
+  , Process(other.Process)
+  , FlashUsed(other.FlashUsed)
+  , FocalLength(other.FocalLength)
+  , ExposureTime(other.ExposureTime)
+  , ApertureFNumber(other.ApertureFNumber)
+  , Distance(other.Distance)
+  , CCDWidth(other.CCDWidth)
+  , ExposureBias(other.ExposureBias)
+  , DigitalZoomRatio(other.DigitalZoomRatio)
+  , FocalLength35mmEquiv(other.FocalLength35mmEquiv)
+  , Whitebalance(other.Whitebalance)
+  , MeteringMode(other.MeteringMode)
+  , ExposureProgram(other.ExposureProgram)
+  , ExposureMode(other.ExposureMode)
+  , ISOequivalent(other.ISOequivalent)
+  , LightSource(other.LightSource)
+  , CommentsCharset(EXIF_COMMENT_CHARSET_CONVERTED)
+  , XPCommentsCharset(EXIF_COMMENT_CHARSET_CONVERTED)
+  , Comments(Convert(other.CommentsCharset, other.Comments))
+  , FileComment(Convert(EXIF_COMMENT_CHARSET_UNKNOWN, other.FileComment))
+  , XPComment(Convert(other.XPCommentsCharset, other.XPComment))
+  , Description(other.Description)
+  , ThumbnailOffset(other.ThumbnailOffset)
+  , ThumbnailSize(other.ThumbnailSize)
+  , LargestExifOffset(other.LargestExifOffset)
+  , ThumbnailAtEnd(other.ThumbnailAtEnd)
+  , ThumbnailSizeOffset(other.ThumbnailSizeOffset)
+  , DateTimeOffsets(other.DateTimeOffsets, other.DateTimeOffsets + other.numDateTimeTags)
+  , GpsInfoPresent(other.GpsInfoPresent)
+  , GpsLat(other.GpsLat)
+  , GpsLong(other.GpsLong)
+  , GpsAlt(other.GpsAlt)
+{
+}
+
+std::string CPictureInfoTag::ExifInfo::Convert(int charset, const char* data)
+{
+  std::string value;
+
+  // The charset used for the UserComment is stored in CommentsCharset:
+  // Ascii, Unicode (UCS2), JIS (X208-1990), Unknown (application specific)
+  if (charset == EXIF_COMMENT_CHARSET_UNICODE)
+  {
+    g_charsetConverter.ucs2ToUTF8(std::u16string(reinterpret_cast<const char16_t*>(data)), value);
+  }
+  else
+  {
+    // Ascii doesn't need to be converted (EXIF_COMMENT_CHARSET_ASCII)
+    // Unknown data can't be converted as it could be any codec (EXIF_COMMENT_CHARSET_UNKNOWN)
+    // JIS data can't be converted as CharsetConverter and iconv lacks support (EXIF_COMMENT_CHARSET_JIS)
+    g_charsetConverter.unknownToUTF8(data, value);
+  }
+
+  return value;
+}
+
+CPictureInfoTag::IPTCInfo::IPTCInfo(const IPTCInfo_t& other)
+  : RecordVersion(other.RecordVersion)
+  , SupplementalCategories(other.SupplementalCategories)
+  , Keywords(other.Keywords)
+  , Caption(other.Caption)
+  , Author(other.Author)
+  , Headline(other.Headline)
+  , SpecialInstructions(other.SpecialInstructions)
+  , Category(other.Category)
+  , Byline(other.Byline)
+  , BylineTitle(other.BylineTitle)
+  , Credit(other.Credit)
+  , Source(other.Source)
+  , CopyrightNotice(other.CopyrightNotice)
+  , ObjectName(other.ObjectName)
+  , City(other.City)
+  , State(other.State)
+  , Country(other.Country)
+  , TransmissionReference(other.TransmissionReference)
+  , Date(other.Date)
+  , Urgency(other.Urgency)
+  , ReferenceService(other.ReferenceService)
+  , CountryCode(other.CountryCode)
+  , TimeCreated(other.TimeCreated)
+  , SubLocation(other.SubLocation)
+  , ImageType(other.ImageType)
+{
+}
+
 void CPictureInfoTag::Reset()
 {
   memset(&m_exifInfo, 0, sizeof(m_exifInfo));
diff --git a/xbmc/pictures/PictureInfoTag.h b/xbmc/pictures/PictureInfoTag.h
index 04924d013f..29ad9a248d 100644
--- a/xbmc/pictures/PictureInfoTag.h
+++ b/xbmc/pictures/PictureInfoTag.h
@@ -24,53 +24,72 @@ class CPictureInfoTag : public IArchivable, public ISerializable, public ISortab
   // Mimic structs from libexif.h but with C++ types instead of arrays
   struct ExifInfo
   {
+    ExifInfo() = default;
+    ExifInfo(const ExifInfo&) = default;
+    ExifInfo(ExifInfo&&) = default;
+    ExifInfo(const ExifInfo_t& other);
+
+    ExifInfo& operator=(const ExifInfo&) = default;
+    ExifInfo& operator=(ExifInfo&&) = default;
+
     std::string CameraMake;
     std::string CameraModel;
     std::string DateTime;
-    int Height;
-    int Width;
-    int Orientation;
-    int IsColor;
-    int Process;
-    int FlashUsed;
-    float FocalLength;
-    float ExposureTime;
-    float ApertureFNumber;
-    float Distance;
-    float CCDWidth;
-    float ExposureBias;
-    float DigitalZoomRatio;
-    int FocalLength35mmEquiv;
-    int Whitebalance;
-    int MeteringMode;
-    int ExposureProgram;
-    int ExposureMode;
-    int ISOequivalent;
-    int LightSource;
-    int CommentsCharset;
-    int XPCommentsCharset;
+    int Height{};
+    int Width{};
+    int Orientation{};
+    int IsColor{};
+    int Process{};
+    int FlashUsed{};
+    float FocalLength{};
+    float ExposureTime{};
+    float ApertureFNumber{};
+    float Distance{};
+    float CCDWidth{};
+    float ExposureBias{};
+    float DigitalZoomRatio{};
+    int FocalLength35mmEquiv{};
+    int Whitebalance{};
+    int MeteringMode{};
+    int ExposureProgram{};
+    int ExposureMode{};
+    int ISOequivalent{};
+    int LightSource{};
+    int CommentsCharset{};
+    int XPCommentsCharset{};
     std::string Comments;
     std::string FileComment;
     std::string XPComment;
     std::string Description;
 
-    unsigned ThumbnailOffset;
-    unsigned ThumbnailSize;
-    unsigned LargestExifOffset;
+    unsigned ThumbnailOffset{};
+    unsigned ThumbnailSize{};
+    unsigned LargestExifOffset{};
 
-    char ThumbnailAtEnd;
-    int ThumbnailSizeOffset;
+    char ThumbnailAtEnd{};
+    int ThumbnailSizeOffset{};
 
     std::vector<int> DateTimeOffsets;
 
-    int GpsInfoPresent;
+    int GpsInfoPresent{};
     std::string GpsLat;
     std::string GpsLong;
     std::string GpsAlt;
+
+  private:
+    static std::string Convert(int charset, const char* data);
   };
 
   struct IPTCInfo
   {
+    IPTCInfo() = default;
+    IPTCInfo(const IPTCInfo&) = default;
+    IPTCInfo(IPTCInfo&&) = default;
+    IPTCInfo(const IPTCInfo_t& other);
+
+    IPTCInfo& operator=(const IPTCInfo&) = default;
+    IPTCInfo& operator=(IPTCInfo&&) = default;
+
     std::string RecordVersion;
     std::string SupplementalCategories;
     std::string Keywords;
-- 
2.27.0

